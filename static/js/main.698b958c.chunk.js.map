{"version":3,"sources":["VariableInput.js","VariableConverter.js","ColourKey.js","App.js","index.js"],"names":["VariableInput","state","height","weight","BMI","updateHeight","e","setState","target","value","updateWeight","calculateBMI","preventDefault","heightInMetresSquared","Math","round","classList","classes","Object","entries","filter","entry","map","join","className","type","this","onChange","onClick","bmiDisplay","purple","green","amber","red","pink","React","Component","VariableConverter","feet","inches","stone","pounds","heightConverter","heightInInches","parseInt","console","log","heightInCM","weightConverter","weightInKG","updateFeet","updateInches","updateStone","updatePounds","placeholder","ColourKey","App","bmi","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.698b958c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./VariableInput.css\";\r\n\r\nclass VariableInput extends React.Component {\r\n  state = {\r\n    height: \"\",\r\n    weight: \"\",\r\n    BMI: \" \",\r\n  };\r\n  updateHeight = (e) => {\r\n    this.setState({ height: e.target.value });\r\n  };\r\n  updateWeight = (e) => {\r\n    this.setState({ weight: e.target.value });\r\n  };\r\n  calculateBMI = (e) => {\r\n    e.preventDefault();\r\n    let heightInMetresSquared =\r\n      (this.state.height / 100) * (this.state.height / 100);\r\n    let BMI = Math.round(this.state.weight / heightInMetresSquared);\r\n    this.setState({ BMI: BMI });\r\n  };\r\n  classList = (classes) => {\r\n    return Object.entries(classes)\r\n      .filter((entry) => entry[1])\r\n      .map((entry) => entry[0])\r\n      .join(\" \");\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"variableInput\">\r\n        <div className=\"bmiTitle\">\r\n          <h2>BMI Calculator</h2>\r\n          <p>\r\n            Enter your height and weight in centimetres and kilograms\r\n            respectively\r\n          </p>\r\n        </div>\r\n        <form>\r\n          <h3>Enter Height:</h3>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.height}\r\n            onChange={this.updateHeight}\r\n          ></input>\r\n          <h3>Enter Weight:</h3>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.weight}\r\n            onChange={this.updateWeight}\r\n          ></input>\r\n          <button type=\"submit\" onClick={this.calculateBMI}>\r\n            Calculate\r\n          </button>\r\n        </form>\r\n        <div\r\n          className={this.classList({\r\n            bmiDisplay: true,\r\n            purple: this.state.BMI < 18.5,\r\n            green: this.state.BMI > 18.5 && this.state.BMI < 24.9,\r\n            amber: this.state.BMI > 24.9 && this.state.BMI < 29.9,\r\n            red: this.state.BMI > 29.9,\r\n            pink: this.state.BMI == \" \",\r\n          })}\r\n        >\r\n          Your BMI is: {this.state.BMI}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default VariableInput;\r\n","import React from \"react\";\r\nimport \"./VariableConverter.css\";\r\n\r\nclass VariableConverter extends React.Component {\r\n\r\n    state = {\r\n        feet: \"\",\r\n        inches: \"\",\r\n        stone: \"\",\r\n        pounds: \"\",\r\n        height: \"\",\r\n        weight: \"\"\r\n    }\r\n    heightConverter = () => {\r\n        let feet = this.state.feet;\r\n        let inches = this.state.inches;\r\n        let feetInInches = feet * 12;\r\n        let heightInInches = parseInt(feetInInches) + parseInt(inches);\r\n        console.log(heightInInches)\r\n        let heightInCM = heightInInches * 2.54;\r\n        this.setState({ height: heightInCM });\r\n    }\r\n    weightConverter = () => {\r\n        let stone = this.state.stone;\r\n        let pounds = this.state.pounds;\r\n        let stoneInKG = stone * 6.35\r\n        let poundsInKG = pounds * 0.45\r\n        let weightInKG = stoneInKG + poundsInKG\r\n        this.setState({ weight: weightInKG })\r\n    }\r\n    updateFeet = (e) => {\r\n        this.setState({ feet: e.target.value })\r\n    }\r\n    updateInches = (e) => {\r\n        this.setState({ inches: e.target.value })\r\n    }\r\n    updateStone = (e) => {\r\n        this.setState({ stone: e.target.value })\r\n    }\r\n    updatePounds = (e) => {\r\n        this.setState({ pounds: e.target.value })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"variableConverter\">\r\n                <div className=\"converterTitle\">\r\n                    <h2>Converter</h2>\r\n                    <p>Convert your height and weight into centimetres and kilograms respectively</p>\r\n                </div>\r\n                <div className=\"heightConverter\">\r\n                    <h3>Height Converter</h3>\r\n                    <input type=\"text\" placeholder=\"Feet\" value={this.state.feet} onChange={this.updateFeet}></input>\r\n                    <input type=\"text\" placeholder=\"Inches\" value={this.state.inches} onChange={this.updateInches}></input>\r\n                    <button type=\"submit\" onClick={this.heightConverter}>Calculate</button>\r\n                    <div className=\"conversionDisplay\">\r\n                        <h4></h4>\r\n                    </div>\r\n                </div>\r\n                <div className=\"weightConverter\">\r\n                    <h3>Weight Converter</h3>\r\n                    <input type=\"text\" placeholder=\"Stone\" value={this.state.stone} onChange={this.updateStone}></input>\r\n                    <input type=\"text\" placeholder=\"Pounds\" value={this.state.pounds} onChange={this.updatePounds}></input>\r\n                    <button type=\"submit\" onClick={this.weightConverter}>Calculate</button>\r\n                    <div className=\"conversionDisplay\">\r\n                        <p>Your height is {this.state.height}cm</p>\r\n                        <p>Your weight is {this.state.weight}kg</p>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default VariableConverter;","import React from \"react\";\r\nimport \"./ColourKey.css\";\r\n\r\n\r\nconst ColourKey = () => (\r\n    <div className=\"key\">\r\n        <p>Key Chart</p>\r\n        <span className=\"underWeight\">\r\n            <div className=\"purpleBlock\"></div>\r\n            <p>Underweight</p>\r\n        </span>\r\n        <span className=\"healthyWeight\">\r\n            <div className=\"greenBlock\"></div>\r\n            <p>Healthy weight</p>\r\n        </span>\r\n        <span className=\"overWeight\">\r\n            <div className=\"amberBlock\"></div>\r\n            <p>Over weight</p>\r\n        </span>\r\n        <span className=\"obeseWeight\">\r\n            <div className=\"redBlock\"></div>\r\n            <p>Obese</p>\r\n        </span>\r\n    </div>\r\n)\r\n\r\nexport default ColourKey;","import React from 'react';\nimport './App.css';\nimport VariableInput from \"./VariableInput.js\";\nimport VariableConverter from \"./VariableConverter.js\";\nimport ColourKey from \"./ColourKey.js\";\n\nclass App extends React.Component {\n  state = {\n    height: \"\",\n    weight: \"\",\n    bmi: \"\"\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>BMI CALCULATOR</h1>\n        <div className=\"mainBody\">\n          <VariableConverter />\n          <VariableInput />\n          <ColourKey />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}