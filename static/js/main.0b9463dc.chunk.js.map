{"version":3,"sources":["VariableInput.js","VariableConverter.js","ColourKey.js","App.js","index.js"],"names":["VariableInput","state","height","weight","BMI","updateHeight","e","setState","target","value","updateWeight","calculateBMI","preventDefault","heightInMetresSquared","addClass","className","type","this","onChange","onClick","React","Component","VariableConverter","feet","inches","stone","pounds","heightConverter","heightInInches","parseInt","console","log","heightInCM","weightConverter","weightInKG","updateFeet","updateInches","updateStone","updatePounds","placeholder","ColourKey","App","bmi","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b9463dc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./VariableInput.css\";\r\n\r\nclass VariableInput extends React.Component {\r\n    state = {\r\n        height: \"\",\r\n        weight: \"\",\r\n        BMI: \"\"\r\n    }\r\n    updateHeight = (e) => {\r\n        this.setState({ height: e.target.value })\r\n    }\r\n    updateWeight = (e) => {\r\n        this.setState({ weight: e.target.value })\r\n    }\r\n    calculateBMI = (e) => {\r\n        e.preventDefault();\r\n        let heightInMetresSquared = (this.state.height / 100) * (this.state.height / 100);\r\n        let BMI = this.state.weight / heightInMetresSquared;\r\n        this.setState({ BMI: BMI })\r\n    }\r\n    addClass = () => {\r\n        if (this.state.BMI < 18.5) {\r\n            return \"amber\";\r\n        } else if (this.state.BMI > 18.5 && this.state.BMI < 24.9) {\r\n            return \"green\"\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"variableInput\">\r\n                <div className=\"bmiTitle\">\r\n                    <h2>BMI Calculator</h2>\r\n                    <p>Enter your height and weight in centimetres and kilograms respectively</p>\r\n                </div>\r\n                <form>\r\n                    <h3>Enter Height:</h3>\r\n                    <input type=\"text\" value={this.state.height} onChange={this.updateHeight}></input>\r\n                    <h3>Enter Weight:</h3>\r\n                    <input type=\"text\" value={this.state.weight} onChange={this.updateWeight}></input>\r\n                    <button type=\"submit\" onClick={this.calculateBMI}>Calculate</button>\r\n                </form>\r\n                <div className={`bmiDisplay ${this.addClass}`}>Your BMI is: {this.state.BMI}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default VariableInput;","import React from \"react\";\r\nimport \"./VariableConverter.css\";\r\n\r\nclass VariableConverter extends React.Component {\r\n\r\n    state = {\r\n        feet: \"\",\r\n        inches: \"\",\r\n        stone: \"\",\r\n        pounds: \"\",\r\n        height: \"\",\r\n        weight: \"\"\r\n    }\r\n    heightConverter = () => {\r\n        let feet = this.state.feet;\r\n        let inches = this.state.inches;\r\n        let feetInInches = feet * 12;\r\n        let heightInInches = parseInt(feetInInches) + parseInt(inches);\r\n        console.log(heightInInches)\r\n        let heightInCM = heightInInches * 2.54;\r\n        this.setState({ height: heightInCM });\r\n    }\r\n    weightConverter = () => {\r\n        let stone = this.state.stone;\r\n        let pounds = this.state.pounds;\r\n        let stoneInKG = stone * 6.35\r\n        let poundsInKG = pounds * 0.45\r\n        let weightInKG = stoneInKG + poundsInKG\r\n        this.setState({ weight: weightInKG })\r\n    }\r\n    updateFeet = (e) => {\r\n        this.setState({ feet: e.target.value })\r\n    }\r\n    updateInches = (e) => {\r\n        this.setState({ inches: e.target.value })\r\n    }\r\n    updateStone = (e) => {\r\n        this.setState({ stone: e.target.value })\r\n    }\r\n    updatePounds = (e) => {\r\n        this.setState({ pounds: e.target.value })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"variableConverter\">\r\n                <div className=\"converterTitle\">\r\n                    <h2>Converter</h2>\r\n                    <p>Convert your height and weight into centimetres and kilograms respectively</p>\r\n                </div>\r\n                <div className=\"heightConverter\">\r\n                    <h3>Height Converter</h3>\r\n                    <input type=\"text\" placeholder=\"Feet\" value={this.state.feet} onChange={this.updateFeet}></input>\r\n                    <input type=\"text\" placeholder=\"Inches\" value={this.state.inches} onChange={this.updateInches}></input>\r\n                    <button type=\"submit\" onClick={this.heightConverter}>Calculate</button>\r\n                    <div className=\"conversionDisplay\">\r\n                        <h4></h4>\r\n                    </div>\r\n                </div>\r\n                <div className=\"weightConverter\">\r\n                    <h3>Weight Converter</h3>\r\n                    <input type=\"text\" placeholder=\"Stone\" value={this.state.stone} onChange={this.updateStone}></input>\r\n                    <input type=\"text\" placeholder=\"Pounds\" value={this.state.pounds} onChange={this.updatePounds}></input>\r\n                    <button type=\"submit\" onClick={this.weightConverter}>Calculate</button>\r\n                    <div className=\"conversionDisplay\">\r\n                        <p>Your height is {this.state.height}</p>\r\n                        <p>Your weight is {this.state.weight}</p>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default VariableConverter;","import React from \"react\";\r\nimport \"./ColourKey.css\";\r\n\r\n\r\nconst ColourKey = () => (\r\n    <div className=\"key\">\r\n        <p>Key Chart</p>\r\n        <span className=\"underWeight\">\r\n            <div className=\"amber\"></div>\r\n            <p>Underweight</p>\r\n        </span>\r\n        <span className=\"healthyWeight\">\r\n            <div className=\"green\"></div>\r\n            <p>Healthy weight</p>\r\n        </span>\r\n        <span className=\"overWeight\">\r\n            <div className=\"amber\"></div>\r\n            <p>Over weight</p>\r\n        </span>\r\n        <span className=\"obeseWeight\">\r\n            <div className=\"red\"></div>\r\n            <p>Obese</p>\r\n        </span>\r\n    </div>\r\n)\r\n\r\nexport default ColourKey;","import React from 'react';\nimport './App.css';\nimport VariableInput from \"./VariableInput.js\";\nimport VariableConverter from \"./VariableConverter.js\";\nimport ColourKey from \"./ColourKey.js\";\n\nclass App extends React.Component {\n  state = {\n    height: \"\",\n    weight: \"\",\n    bmi: \"\"\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>BMI CALCULATOR</h1>\n        <div className=\"mainBody\">\n          <VariableConverter />\n          <VariableInput />\n          <ColourKey />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}